# -*- coding: utf-8 -*-
"""Cópia de fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_UMF7e_0VqyCMPDT0yDFqMxUoBx3BNAY
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# function to return recommended books - this will be tested
def get_recommends(book = ""):
    # Filtrar usuários com pelo menos 200 avaliações
    users_ratings = df_ratings['user'].value_counts()
    users_with_min_ratings = users_ratings[users_ratings >= 200].index
    filtered_ratings = df_ratings[df_ratings['user'].isin(users_with_min_ratings)]

    # Filtrar livros com pelo menos 100 avaliações
    books_ratings = filtered_ratings['isbn'].value_counts()
    books_with_min_ratings = books_ratings[books_ratings >= 100].index
    final_ratings = filtered_ratings[filtered_ratings['isbn'].isin(books_with_min_ratings)]

    # Criar matriz pivot de usuários x livros
    pivot_table = final_ratings.pivot(index='isbn', columns='user', values='rating').fillna(0)

    # Converter para matriz esparsa
    matrix_sparse = csr_matrix(pivot_table.values)

    # Criar e treinar o modelo KNN
    model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
    model_knn.fit(matrix_sparse)

    # Encontrar o índice do livro na tabela pivot
    book_isbn = df_books[df_books['title'] == book]['isbn'].values[0]
    book_index = pivot_table.index.get_loc(book_isbn)

    # Encontrar os vizinhos mais próximos
    distances, indices = model_knn.kneighbors(
        pivot_table.iloc[book_index, :].values.reshape(1, -1),
        n_neighbors=6
    )

    # Preparar a lista de recomendações
    recommended_books = [book, []]

    # Adicionar os 5 livros mais similares com suas distâncias
    for i in range(1, len(distances.flatten())):
        isbn = pivot_table.index[indices.flatten()[i]]
        title = df_books[df_books['isbn'] == isbn]['title'].values[0]
        distance = distances.flatten()[i]
        recommended_books[1].append([title, distance])

    return recommended_books

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
    test_pass = True
    recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
    if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
        test_pass = False
    recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
    recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
    for i in range(2):
        if recommends[1][i][0] not in recommended_books:
            test_pass = False
        if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
            test_pass = False
    if test_pass:
        print("You passed the challenge! 🎉🎉🎉🎉🎉")
    else:
        print("You haven't passed yet. Keep trying!")

test_book_recommendation()